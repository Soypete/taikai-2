// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: taikai/v1/requests.proto

package taikaiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on Hellos with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Hellos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hellos with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HellosMultiError, or nil if none found.
func (m *Hellos) ValidateAll() error {
	return m.validate(true)
}

func (m *Hellos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHellos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HellosValidationError{
						field:  fmt.Sprintf("Hellos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HellosValidationError{
						field:  fmt.Sprintf("Hellos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HellosValidationError{
					field:  fmt.Sprintf("Hellos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HellosMultiError(errors)
	}

	return nil
}

// HellosMultiError is an error wrapping multiple validation errors returned by
// Hellos.ValidateAll() if the designated constraints aren't met.
type HellosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HellosMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HellosMultiError) AllErrors() []error { return m }

// HellosValidationError is the validation error returned by Hellos.Validate if
// the designated constraints aren't met.
type HellosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HellosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HellosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HellosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HellosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HellosValidationError) ErrorName() string { return "HellosValidationError" }

// Error satisfies the builtin error interface
func (e HellosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHellos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HellosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HellosValidationError{}

// Validate checks the field values on UpsertHellosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertHellosRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertHellosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertHellosRequestMultiError, or nil if none found.
func (m *UpsertHellosRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertHellosRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHellos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertHellosRequestValidationError{
						field:  fmt.Sprintf("Hellos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertHellosRequestValidationError{
						field:  fmt.Sprintf("Hellos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertHellosRequestValidationError{
					field:  fmt.Sprintf("Hellos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertHellosRequestMultiError(errors)
	}

	return nil
}

// UpsertHellosRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertHellosRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertHellosRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertHellosRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertHellosRequestMultiError) AllErrors() []error { return m }

// UpsertHellosRequestValidationError is the validation error returned by
// UpsertHellosRequest.Validate if the designated constraints aren't met.
type UpsertHellosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertHellosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertHellosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertHellosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertHellosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertHellosRequestValidationError) ErrorName() string {
	return "UpsertHellosRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertHellosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertHellosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertHellosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertHellosRequestValidationError{}

// Validate checks the field values on UpsertOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpsertOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertOrgRequestMultiError, or nil if none found.
func (m *UpsertOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertOrgRequestValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertOrgRequestValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertOrgRequestValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertOrgRequestMultiError(errors)
	}

	return nil
}

// UpsertOrgRequestMultiError is an error wrapping multiple validation errors
// returned by UpsertOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type UpsertOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertOrgRequestMultiError) AllErrors() []error { return m }

// UpsertOrgRequestValidationError is the validation error returned by
// UpsertOrgRequest.Validate if the designated constraints aren't met.
type UpsertOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertOrgRequestValidationError) ErrorName() string { return "UpsertOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpsertOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertOrgRequestValidationError{}

// Validate checks the field values on ListOrgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOrgRequestMultiError,
// or nil if none found.
func (m *ListOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.OrgId != nil {
		// no validation rules for OrgId
	}

	if len(errors) > 0 {
		return ListOrgRequestMultiError(errors)
	}

	return nil
}

// ListOrgRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgRequestMultiError) AllErrors() []error { return m }

// ListOrgRequestValidationError is the validation error returned by
// ListOrgRequest.Validate if the designated constraints aren't met.
type ListOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgRequestValidationError) ErrorName() string { return "ListOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgRequestValidationError{}

// Validate checks the field values on ListOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgResponseMultiError, or nil if none found.
func (m *ListOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgResponseValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgResponseValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgResponseValidationError{
					field:  fmt.Sprintf("Orgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrgResponseMultiError(errors)
	}

	return nil
}

// ListOrgResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgResponseMultiError) AllErrors() []error { return m }

// ListOrgResponseValidationError is the validation error returned by
// ListOrgResponse.Validate if the designated constraints aren't met.
type ListOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgResponseValidationError) ErrorName() string { return "ListOrgResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgResponseValidationError{}

// Validate checks the field values on ListOrgUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgUsersRequestMultiError, or nil if none found.
func (m *ListOrgUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.OrgId != nil {
		// no validation rules for OrgId
	}

	if len(errors) > 0 {
		return ListOrgUsersRequestMultiError(errors)
	}

	return nil
}

// ListOrgUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrgUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrgUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgUsersRequestMultiError) AllErrors() []error { return m }

// ListOrgUsersRequestValidationError is the validation error returned by
// ListOrgUsersRequest.Validate if the designated constraints aren't met.
type ListOrgUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgUsersRequestValidationError) ErrorName() string {
	return "ListOrgUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgUsersRequestValidationError{}

// Validate checks the field values on ListOrgUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgUsersResponseMultiError, or nil if none found.
func (m *ListOrgUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrgUsersResponseMultiError(errors)
	}

	return nil
}

// ListOrgUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrgUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrgUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgUsersResponseMultiError) AllErrors() []error { return m }

// ListOrgUsersResponseValidationError is the validation error returned by
// ListOrgUsersResponse.Validate if the designated constraints aren't met.
type ListOrgUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgUsersResponseValidationError) ErrorName() string {
	return "ListOrgUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgUsersResponseValidationError{}

// Validate checks the field values on UpsertOrgUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertOrgUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertOrgUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertOrgUserRequestMultiError, or nil if none found.
func (m *UpsertOrgUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertOrgUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.OrgId != nil {
		// no validation rules for OrgId
	}

	if m.User != nil {

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertOrgUserRequestValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertOrgUserRequestValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertOrgUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertOrgUserRequestMultiError(errors)
	}

	return nil
}

// UpsertOrgUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertOrgUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertOrgUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertOrgUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertOrgUserRequestMultiError) AllErrors() []error { return m }

// UpsertOrgUserRequestValidationError is the validation error returned by
// UpsertOrgUserRequest.Validate if the designated constraints aren't met.
type UpsertOrgUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertOrgUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertOrgUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertOrgUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertOrgUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertOrgUserRequestValidationError) ErrorName() string {
	return "UpsertOrgUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertOrgUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertOrgUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertOrgUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertOrgUserRequestValidationError{}

// Validate checks the field values on DeleteOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgRequestMultiError, or nil if none found.
func (m *DeleteOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return DeleteOrgRequestMultiError(errors)
	}

	return nil
}

// DeleteOrgRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgRequestMultiError) AllErrors() []error { return m }

// DeleteOrgRequestValidationError is the validation error returned by
// DeleteOrgRequest.Validate if the designated constraints aren't met.
type DeleteOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgRequestValidationError) ErrorName() string { return "DeleteOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgRequestValidationError{}
